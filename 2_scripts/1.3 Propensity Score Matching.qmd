---
title: "1.3 Propensity Score Matching"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

## Load Packages

```{r}
library(dplyr)
library(MatchIt)      # Pak for PSM
library(lmtest)       # Pak for LRT
library(sandwich)     # ??? why we need this
library(dgof)         # k.s test
```

## Load Dataset

```{r}
load(file='~/dbs-vs-venous-antibodies/1_data/private/CLSA_mncom.RData')
```

# ===================== Part I. Propensity Score Matching ==================

```{r}
# Simple model for PSM, using age, sex, urbanicity, edu (numeric)
match_01 <- matchit(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
                      URBAN_RURAL_COVID +
                      SER_EDU_COV,
    data=CLSA_mncom[is.na(CLSA_mncom$URBAN_RURAL_COVID)==F &
                    is.na(CLSA_mncom$SER_EDU_COV)==F ,],
    method = "nearest",distance ="glm",
    ratio = 1, replace = FALSE)
summary(match_01)

#plotting the balance between DBS and VBS
plot(match_01, type = "jitter", interactive = FALSE)
plot(summary(match_01), abs = FALSE) # looks good
```

Match_02: Adding more demographic variables

```{r}
# Adding all the available demo variables, 
match_02 <- matchit(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
                      as.factor(URBAN_RURAL_COVID) +
                      SER_EDU_COV + SER_ETHN_WH_COV +
                      SER_FAMPH_COV,
    data=CLSA_mncom[is.na(CLSA_mncom$URBAN_RURAL_COVID)==F &
                    is.na(CLSA_mncom$SER_EDU_COV)==F &
                    is.na(CLSA_mncom$SER_FAMPH_COV)==F &
                    is.na(CLSA_mncom$SER_ETHN_WH_COV)==F ,],
    method = "nearest",distance ="glm",
    ratio = 1, replace = FALSE)
summary(match_02)

#plotting the balance between DBS and VBS
plot(match_02, type = "jitter", interactive = FALSE)
plot(summary(match_02), abs = FALSE) # looks good
```

3.  Matched Pairs 3: added Health vars (physical, mental, mobility)

```{r}
match_03 <- matchit(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
                      as.factor(URBAN_RURAL_COVID) +
                      SER_EDU_COV + SER_ETHN_WH_COV + SER_FAMPH_COV +
                      min_health + maj_health_bin +
                      GAD_NBRMIS_COVX + DEP_CESD10_COVX +
                      FUL_SIT1H_COVX,
    data=CLSA_mncom[is.na(CLSA_mncom$URBAN_RURAL_COVID)==F &
                    is.na(CLSA_mncom$SER_EDU_COV)==F &
                    is.na(CLSA_mncom$SER_FAMPH_COV)==F &
                    is.na(CLSA_mncom$SER_ETHN_WH_COV)==F &
                    is.na(CLSA_mncom$min_health)==F &
                    is.na(CLSA_mncom$maj_health)==F &
                    is.na(CLSA_mncom$DEP_CESD10_COVX)==F &
                    is.na(CLSA_mncom$FUL_SIT1H_COVX)==F,],
    method = "nearest",distance ="glm",
    ratio = 1, replace = FALSE)
summary(match_03)

#plotting the balance between DBS and VBS
plot(match_03, type = "jitter", interactive = FALSE)
plot(summary(match_03), abs = FALSE) # looks good
```
4. Matched Pairs 4: using com50 data (only keep those live within 50-km to DCS), adding time, pcr+ tests, vaccination, hospitalization and provinces groups into the model:
```{r}
match_04 <- matchit(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
                      as.factor(URBAN_RURAL_COVID) +
                      SER_EDU_COV + SER_ETHN_WH_COV + SER_FAMPH_COV +
                      min_health + maj_health_bin +
                      GAD_NBRMIS_COVX + DEP_CESD10_COVX +
                      FUL_SIT1H_COVX + dist_min +
                      SER_RSLT_SUM_bin15 + time_vac15 +
                      PROV_5 + outbreak,
    data=CLSA_com50[is.na(CLSA_com50$URBAN_RURAL_COVID)==F &
                    is.na(CLSA_com50$SER_EDU_COV)==F &
                    is.na(CLSA_com50$SER_FAMPH_COV)==F &
                    is.na(CLSA_com50$SER_ETHN_WH_COV)==F &
                    is.na(CLSA_com50$min_health)==F &
                    is.na(CLSA_com50$maj_health)==F &
                    is.na(CLSA_com50$DEP_CESD10_COVX)==F &
                    is.na(CLSA_com50$FUL_SIT1H_COVX)==F &
                    is.na(CLSA_com50$outbreak)==F,],
    method = "nearest",distance ="glm",
    ratio = 1, replace = FALSE)
summary(match_04)

#plotting the balance between DBS and VBS
plot(match_04, type = "jitter", interactive = FALSE)
plot(summary(match_04), abs = FALSE) # looks good
```
Matched Pairs 4.a: Add all we have, but subclass
```{r}
match_04.a <- matchit(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
            as.factor(URBAN_RURAL_COVID) +
            as.factor(SER_EDU_COV) + SER_ETHN_WH_COV + SER_FAMPH_COV +
            min_health + maj_health_bin +
            GAD_NBRMIS_COVX + DEP_CESD10_COVX +
            FUL_SIT1H_COVX + dist_min+
            SER_RSLT_SUM_bin15 + time_vac15 +
            PROV_5 + outbreak, 
            data=CLSA_com50[is.na(CLSA_com50$URBAN_RURAL_COVID)==F &
                    is.na(CLSA_com50$SER_EDU_COV)==F &
                    is.na(CLSA_com50$SER_FAMPH_COV)==F &
                    is.na(CLSA_com50$SER_ETHN_WH_COV)==F &
                    is.na(CLSA_com50$min_health)==F &
                    is.na(CLSA_com50$maj_health)==F &
                    is.na(CLSA_com50$DEP_CESD10_COVX)==F &
                    is.na(CLSA_com50$FUL_SIT1H_COVX)==F &
                    is.na(CLSA_com50$outbreak)==F,],
             method = "subclass",distance ="glm", 
             subclass=8, estimand = 'ATE',
             ratio = 1, replace = FALSE)
summary(match_04.a)

plot(summary(match_04.a), abs = FALSE) # looks better than "nearest"
```

Model 06, Best-fit model with minimal AIC
```{r}
lm06 <- glm(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
            as.factor(URBAN_RURAL_COVID) +
            SER_ETHN_WH_COV  +
            as.factor(SER_EDU_COV) +
            DEP_CESD10_COVX +
            dist_min +
            time_vac15 +
            PROV_5 + outbreak, 
            data=CLSA_com50[is.na(CLSA_com50$URBAN_RURAL_COVID)==F &
                    is.na(CLSA_com50$SER_EDU_COV)==F &
                    is.na(CLSA_com50$SER_FAMPH_COV)==F &
                    is.na(CLSA_com50$SER_ETHN_WH_COV)==F &
                    is.na(CLSA_com50$min_health)==F &
                    is.na(CLSA_com50$maj_health)==F &
                    is.na(CLSA_com50$DEP_CESD10_COVX)==F &
                    is.na(CLSA_com50$FUL_SIT1H_COVX)==F &
                    is.na(CLSA_com50$outbreak)==F,],
            family = binomial(link='logit'))
summary(lm06)
```
Looking for Best-Fit Model using AIC algorism
```{r}
library(MASS)

# Create Complete Cases 
CLSA_com50s<-CLSA_com50 %>%
  dplyr::select(SER_ADM_COV, AGE_NMBR_COVID , SEX_CLSA ,
            URBAN_RURAL_COVID ,
            SER_EDU_COV, SER_ETHN_WH_COV , SER_FAMPH_COV ,
            min_health , maj_health_bin ,
            GAD_NBRMIS_COVX , DEP_CESD10_COVX ,
            FUL_SIT1H_COVX , dist_min,
            SER_RSLT_SUM_bin15 , time_vac15 ,
            PROV_5 , outbreak)
CLSA_com50s<-na.omit(CLSA_com50s)
CLSA_com50s$URBAN_RURAL_COVID<-as.factor(CLSA_com50s$URBAN_RURAL_COVID)
CLSA_com50s$SER_EDU_COV<-as.factor(CLSA_com50s$SER_EDU_COV)
  

lmAIC <- glm(SER_ADM_COV~., data=CLSA_com50s, family = binomial(link='logit'))
stepAIC(lmAIC, direction = 'backward')

# Same as model 06
```


Matched Paires using Model 06
```{r}
match_06 <- matchit(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
                    as.factor(URBAN_RURAL_COVID) +
                    SER_ETHN_WH_COV  +
                    as.factor(SER_EDU_COV) +
                    DEP_CESD10_COVX +
                    dist_min + time_vac15 +
                    PROV_5 + outbreak, 
    data=CLSA_com50[is.na(CLSA_com50$URBAN_RURAL_COVID)==F &
                    is.na(CLSA_com50$SER_EDU_COV)==F &
                    is.na(CLSA_com50$SER_ETHN_WH_COV)==F &
                    is.na(CLSA_com50$DEP_CESD10_COVX)==F &
                    is.na(CLSA_com50$outbreak)==F,],
    method = "nearest",distance ="glm", subclass=8,
    ratio = 1, replace = FALSE)
summary(match_06)

#plotting the balance between DBS and VBS
plot(match_06, type = "jitter", interactive = FALSE)
plot(match_06, type = "hist", interactive = FALSE)
plot(summary(match_06), abs = FALSE) # looks good

plot(match_06, type = "density", interactive = FALSE,
     which.xs = ~AGE_NMBR_COVID + SEX_CLSA)
```
Any other way to improve the matching?
- use different methods: we used subclass instead of nearest. This matching methods matched within subclasses created based on propensity score. Usually they use 5 subclasses but in our case since it's difficult to reach banlance, we will use 8.

```{r}
match_06.a <- matchit(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
                    URBAN_RURAL_COVID +
                    SER_ETHN_WH_COV  +
                    SER_EDU_COV +
                    DEP_CESD10_COVX +
                    dist_min + time_vac15 +
                    PROV_5 + outbreak, 
    data=CLSA_com50[is.na(CLSA_com50$URBAN_RURAL_COVID)==F &
                    is.na(CLSA_com50$SER_EDU_COV)==F &
                    is.na(CLSA_com50$SER_ETHN_WH_COV)==F &
                    is.na(CLSA_com50$DEP_CESD10_COVX)==F &
                    is.na(CLSA_com50$outbreak)==F,],
    method = "subclass",distance ="glm", subclass=8,
    estimand = 'ATE',
    ratio = 1, replace = FALSE)
summary(match_06.a, subclass = T)

# Making Plots
plot(match_06.a, type = "hist", interactive = FALSE)
plot(summary(match_06.a), abs = FALSE) # looks good

# Concise version of plot:
sum.match06a<-summary(match_06.a)
tab01<-sum.match06a$sum.all
tab02<-sum.match06a$sum.across

namelist<-c("Overall Difference", "Age", "Sex: Female", "Sex: Male",
            "UB/Rural: Rural", "UB/Rural: Urban Core", "UB/Rural: Urban Fringe",
            "UB/Rural: Urban Out of CMA/CA", "UB/Rural: 2nd Urban Core",
            "UB/Rural: DA Only", "Race: Non-WH", "Race: WH", "Edu: <High School", 
            "Edu: High School", "Edu: Vocational Tr", "Edu: Non-uni cert", 
            "Edu: Bachelor", "Edu: Graduate", "Dep Scale", "Travel Dist",
            "Vax over 15 days: No", "Vax over 15 days: Yes", "Prov Group: NFL & NS",
            "Prov Group: QC","Prov Group: ON","Prov Group: MT & AB","Prov Group: BC",
            "Outbreak Peak: No", "Outbreak Peak: Yes")
rownames(tab01)<-namelist
rownames(tab02)<-namelist

sum.match06a$sum.all<-tab01
sum.match06a$sum.across<-tab02

# Use those two lines for continuous var only
# sum.match06a$sum.all<-tab01[c(1,2,19,20),]
# sum.match06a$sum.across<-tab02[c(1,2,19,20),]

# All vars
png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.2 Match_subclass.png", 
    width=2650, height=2400, res=300)
plot(sum.match06a, abs = F,
     main = "Standardized Mean Difference (SMD) DBS vs VBS")
dev.off()

# Only Continuous Vars
# plot(sum.match06a, abs = F,
#     main = "Standardized Mean Difference (SMD) btw DBS & VBS, 
#             Numeric Var only")
```

- try genetic?
```{r}
# Avoid running matchit() with method='genetic', it tooks forwever to run
```


Outcome Analysis

1.  Matched Pairs 1: age sex urban

```{r}
# Anti-N
#matched_dat01 <- match.data(match_03)
matched_dat01 <- match.data(match_01)
lmm.01.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
    data=matched_dat01, family = binomial(link = "logit"))
summary(lmm.01.N)

# Anti_S
lmm.01.S<-lm(SPIKE_ANTIBODY~SER_ADM_COV,
    data=matched_dat01, weights = weights)
summary(lmm.01.S)

#Test the coefficient using cluster robust standard error
coeftest(lmm.01.S, vcov. = vcovCL, cluster = ~subclass)
#Calculate the confidence intervals based on cluster robust standard error
coefci(lmm.01.S, vcov. = vcovCL, cluster = ~subclass, level = 0.95)
```

2.  Matched Pairs 2: added edu race healthcare

```{r}
# Anti-N
matched_dat02 <- match.data(match_02)
lmm.02.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
    data=matched_dat02, family = binomial(link = "logit"))
summary(lmm.02.N)

# Anti_S
lmm.02.S<-lm(SPIKE_ANTIBODY~SER_ADM_COV,
    data=matched_dat02, weights = weights)
summary(lmm.02.S)

#Test the coefficient using cluster robust standard error
coeftest(lmm.02.S, vcov. = vcovCL, cluster = ~subclass)
#Calculate the confidence intervals based on cluster robust standard error
coefci(lmm.02.S, vcov. = vcovCL, cluster = ~subclass, level = 0.95)
```

3. Matched Pairs 6: The logistic regression model applied in PSM is the best-fit model
```{r}
# Use the result from subclass matching method since it has better balance 
matched_dat06a <- match.data(match_06.a)

# OR of anti-N positive
lmm.06a.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
    data=matched_dat06a, family = binomial(link = "logit"))
summary(lmm.06a.N)

lmm.06a.N %>%
  tbl_regression(exponentiate = T)

# OR of anti-S positive
lmm.06a.S<-glm(SER_SPIKE_COV~SER_ADM_COV,
    data=matched_dat06a, family = binomial(link = "logit"))
lmm.06a.S %>%
  tbl_regression(exponentiate = T)
```

## ======== Part.II Making plots for outcomes (Anti-N & Anti-S) ============= ##

This time we use **matched** data

plots for Anti-N (matched_01):
```{r}
p01.N.neg<-ggplot(matched_dat01[matched_dat01$SER_NUCLEOCAPSID_COV==0,]
       , aes(x=as.factor(SER_ADM_COV), y=NUCLEOCAPSID_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-N Ab Assay - Negative") +
  labs(title = "Violin Plot for Numeric Anti-N Results, using matched data") +
  geom_violin(trim=F)

p01.N.pos<-ggplot(matched_dat01[matched_dat01$SER_NUCLEOCAPSID_COV==1,]
       , aes(x=as.factor(SER_ADM_COV), y=NUCLEOCAPSID_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-N Ab Assay - Positive") +
  labs(title = "Violin Plot for Numeric Anti-N Results, using matched data") +
  geom_violin(trim=F)

p01.N.neg + geom_boxplot(width=0.05, color='red')
p01.N.pos + geom_boxplot(width=0.05, color='red')

# Plot not readable for positive results, trim the upper at 5
p01.N.pos5<-ggplot(matched_dat01[matched_dat01$SER_NUCLEOCAPSID_COV==1 &
                                 matched_dat01$NUCLEOCAPSID_ANTIBODY<5,]
       , aes(x=as.factor(SER_ADM_COV), y=NUCLEOCAPSID_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-N Ab Assay - Positive") +
  labs(title = "Violin Plot for Numeric Anti-N Results, using matched data, trimmed at 5") +
  geom_violin(trim=F)

p01.N.pos5+ stat_summary(fun.data="mean_sdl", mult=1, 
                 geom="crossbar", width=0.05, color='red' ) # plus mean & std, biased in this case

p01.N.pos5+ geom_boxplot(width=0.05, color='red')
```

Plots for Anti-S (matched_01)

```{r}
p01.S.neg<-ggplot(matched_dat01[matched_dat01$SER_SPIKE_COV==0,]
       , aes(x=as.factor(SER_ADM_COV), y=SPIKE_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Negative") +
  labs(title = "Violin Plot for Quant Anti-S Results, using matched data") +
  geom_violin(trim=F)

p01.S.pos<-ggplot(matched_dat01[matched_dat01$SER_SPIKE_COV==1,]
       , aes(x=as.factor(SER_ADM_COV), y=SPIKE_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Positive") +
  labs(title = "Violin Plot for Quant Anti-S Results, using matched data") +
  geom_violin(trim=F)

p01.S.neg + geom_boxplot(width=0.05, color='orange')
p01.S.pos + geom_boxplot(width=0.025, color='orange')

# Plot not readable for positive results, trim the upper at 5
p01.S.pos20<-ggplot(matched_dat01[matched_dat01$SER_SPIKE_COV==1 &
                                 matched_dat01$SPIKE_ANTIBODY<20,]
       , aes(x=as.factor(SER_ADM_COV), y=SPIKE_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Positive") +
  labs(title = "Violin Plot for Numeric Anti-S Results, using matched data, trimmed at 20") +
  geom_violin(trim=F)

p01.S.pos20+ geom_boxplot(width=0.05, color='orange')
```

Plots for match_02 data

Anti-N

```{r}
p02.N.neg<-ggplot(matched_dat02[matched_dat02$SER_NUCLEOCAPSID_COV==0,]
       , aes(x=as.factor(SER_ADM_COV), y=NUCLEOCAPSID_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-N Ab Assay - Negative") +
  labs(title = "Violin Plot for Numeric Anti-N Results, using matched data") +
  geom_violin(trim=F)

p02.N.pos<-ggplot(matched_dat02[matched_dat02$SER_NUCLEOCAPSID_COV==1,]
       , aes(x=as.factor(SER_ADM_COV), y=NUCLEOCAPSID_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-N Ab Assay - Positive") +
  labs(title = "Violin Plot for Numeric Anti-N Results, using matched data") +
  geom_violin(trim=F)

p02.N.neg + geom_boxplot(width=0.05, color='red')
p02.N.pos + geom_boxplot(width=0.05, color='red')

# Plot not readable for positive results, trim the upper at 5
p02.N.pos5<-ggplot(matched_dat02[matched_dat02$SER_NUCLEOCAPSID_COV==1 &
                                 matched_dat02$NUCLEOCAPSID_ANTIBODY<5,]
       , aes(x=as.factor(SER_ADM_COV), y=NUCLEOCAPSID_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-N Ab Assay - Positive") +
  labs(title = "Violin Plot for Numeric Anti-N Results, using matched data, trimmed at 5") +
  geom_violin(trim=F)

p02.N.pos5+ geom_boxplot(width=0.05, color='red')
```

Plots for Anti-S (matched_02)

```{r}
p02.S.neg<-ggplot(matched_dat02[matched_dat02$SER_SPIKE_COV==0,]
       , aes(x=as.factor(SER_ADM_COV), y=SPIKE_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Negative") +
  labs(title = "Violin Plot for Quant Anti-S Results, using matched data") +
  geom_violin(trim=F)

p02.S.pos<-ggplot(matched_dat02[matched_dat02$SER_SPIKE_COV==1,]
       , aes(x=as.factor(SER_ADM_COV), y=SPIKE_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Positive") +
  labs(title = "Violin Plot for Quant Anti-S Results, using matched data") +
  geom_violin(trim=F)

p02.S.neg + geom_boxplot(width=0.05, color='orange')
p02.S.pos + geom_boxplot(width=0.025, color='orange')

# Plot not readable for positive results, trim the upper at 20
p02.S.pos20<-ggplot(matched_dat02[matched_dat02$SER_SPIKE_COV==1 &
                                 matched_dat02$SPIKE_ANTIBODY<20,]
       , aes(x=as.factor(SER_ADM_COV), y=SPIKE_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Positive") +
  labs(title = "Violin Plot for Numeric Anti-S Results, using matched data, trimmed at 20") +
  geom_violin(trim=F)

p02.S.pos20+ geom_boxplot(width=0.05, color='orange')
```

Plots for Anti-S (matched_06a)
```{r}
p06a.S.pos<-ggplot(matched_dat06a[matched_dat06a$SER_SPIKE_COV==1,]
       , aes(x=as.factor(SER_ADM_COV), y=SPIKE_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Positive") +
  labs(title = "Violin Plot for Quant Anti-S Results, using matched data") +
  geom_violin(trim=F)

p06a.S.pos + geom_boxplot(width=0.025, color='orange')

# Plot not readable for positive results, trim the upper at 20
p06a.S.pos20<-ggplot(matched_dat06a[matched_dat06a$SER_SPIKE_COV==1 &
                                    matched_dat06a$SPIKE_ANTIBODY<20,]
       , aes(x=as.factor(SER_ADM_COV), y=SPIKE_ANTIBODY)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Positive") +
  labs(title = "Violin Plot for Numeric Anti-S Results, using matched data, trimmed at 20") +
  geom_violin(trim=F)

p06a.S.pos20+ geom_boxplot(width=0.05, color='orange')
```
## Log-10 transform, then do the plot again
```{r}
## log-10 transformation
p06a.S.pos_lg10<-ggplot(matched_dat06a[matched_dat06a$SER_SPIKE_COV==1,]
       , aes(x=as.factor(SER_ADM_COV), y=log(SPIKE_ANTIBODY),base=10)) + 
  labs(x="0=DBS, 1=VBS", y="Anti-S Ab Assay - Positive") +
  labs(title = "Violin Plot for Log10-Transformed Quant Anti-S Results, using matched data") +
  geom_violin(trim=F)

p06a.S.pos_lg10 + geom_boxplot(width=0.025, color='orange')
```

Calculate five numbers for the plot above

```{r}
# DBS
summary(matched_dat02$SPIKE_ANTIBODY[matched_dat02$SER_ADM_COV==0 &
                                     matched_dat02$SER_SPIKE_COV==1])
# VBS
summary(matched_dat02$SPIKE_ANTIBODY[matched_dat02$SER_ADM_COV==1 &
                                     matched_dat02$SER_SPIKE_COV==1])
```

## eCDF function testing Anti-S
```{r}
ecdf_S_DBS<-matched_dat06a %>%
  .[.$SER_SPIKE_COV==1 & .$SER_ADM_COV==0,] %>%
  .$SPIKE_ANTIBODY

# Plot seperately
plot(ecdf(ecdf_S_DBS), main='eCDF of Quant Anti-S Assay Results 
                      (log10 transformed) among DBS',
     xlab = 'Quant Anti-S Assay Results-1og10 Transformed')
  
ecdf_S_VBS<-matched_dat06a %>%
  .[.$SER_SPIKE_COV==1 & .$SER_ADM_COV==1,] %>%
  .$SPIKE_ANTIBODY

plot(ecdf(ecdf_S_VBS), main='eCDF of Quant Anti-S Assay Results 
                      (log10 transformed) among VBS',
     xlab = "Quant Anti-S Assay Results-log10 Transformed")
```

#### Comparing the diff using K.S Test
```{r}
# Kolmogorov-Smirnov Test (KS Test)
# Needs package from {dgof}
png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.1a eCDF Anti-S.png", 
    width=1600, height=1200, res=300)
plot(ecdf(ecdf_S_DBS),
     xlim = c(0.4,2500),
     log='x',
     xaxt = 'n',
     col = "blue",
     main='eCDF of Quant Anti-S Assay Results',
     xlab = 'Quant Anti-S Assay Results')
plot(ecdf(ecdf_S_VBS),
     add = TRUE,
     lwd=2,
     lty = "dashed",
     col = "red")
axis(side=1, at=c(-0.4, 0, 1, 10, 100, 1000))
legend("bottomright", legend = c("DBS", "VBS"),
       lwd = 3, col = c("blue", "red"))
dev.off()
 
# performing the K-S
# Test on x and x2
ks.test(ecdf_S_DBS, ecdf_S_VBS, alternative = "two.sided")
```

The ecdf plot with Anti-N: in this part we probably need to do it seperately for Anti-N negative and Anti-N positive

```{r}
# Create the vectors for plotting:

## N-negative
N_DBS_neg<-matched_dat06a %>%
  .[.$SER_NUCLEOCAPSID_COV==0 & .$SER_ADM_COV==0,] %>%
  .$NUCLEOCAPSID_ANTIBODY
N_VBS_neg<-matched_dat06a %>%
  .[.$SER_NUCLEOCAPSID_COV==0 & .$SER_ADM_COV==1,] %>%
  .$NUCLEOCAPSID_ANTIBODY

## N-positive
N_DBS_pos<-matched_dat06a %>%
  .[.$SER_NUCLEOCAPSID_COV==1 & .$SER_ADM_COV==0,] %>%
  .$NUCLEOCAPSID_ANTIBODY
N_VBS_pos<-matched_dat06a %>%
  .[.$SER_NUCLEOCAPSID_COV==1 & .$SER_ADM_COV==1,] %>%
  .$NUCLEOCAPSID_ANTIBODY
```

```{r}
# Create the ecdf plot:

## Anti-N neg
png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.1b eCDF Anti-N_neg.png", 
    width=1800, height=1200, res=300)
plot(ecdf(N_DBS_neg),
     xlim = range(N_DBS_neg, N_VBS_neg),
     col = "green",
     main='eCDF of Quant Anti-N Assay Results - Negative',
     xlab = 'Quant Anti-N Assay Results')
plot(ecdf(N_VBS_neg),
     add = TRUE,
     lwd=2,
     lty = "dashed",
     col = "orange")
legend("bottomright", legend = c("DBS", "VBS"),
       lwd = 3, col = c("green", "orange"))
dev.off()

## Anti-N pos: using log10 scale

png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.1b eCDF Anti-N_pos.png", 
    width=1800, height=1200, res=300)
plot(ecdf(N_DBS_pos),
     xlim = range(0.1, 100),
     log='x',
     xaxt = 'n',
     col = "green",
     main='eCDF of Quant Anti-N Assay Results - Positive',
     xlab = 'Quant Anti-N Assay Results')
plot(ecdf(N_VBS_pos),
     add = TRUE,
     lwd=2,
     lty = "dashed",
     col = "orange")
axis(side=1, at=c(0.1, 1, 10, 100))
legend("bottomright", legend = c("DBS", "VBS"),
       lwd = 3, col = c("green", "orange"))
dev.off()


# Test the diff
ks.test(N_DBS_neg, N_VBS_neg, alternative = "two.sided")
ks.test(N_DBS_pos, N_VBS_pos, alternative = "two.sided")
```
## ========================= Part. III OR Plot ===============================##

#### Model.06
```{r}
CLSA_com50$dist_min_km<-CLSA_com50$dist_min/1000
# The regression model: Best-fit Model
lm06p <- glm(SER_ADM_COV~AGE_NMBR_COVID + SEX_CLSA +
            URBAN_RURAL_COVID +
            relevel(SER_ETHN_WH_COV, ref='1=WH')  +
            SER_EDU_COV +
            DEP_CESD10_COVX +
            dist_min_km +
            time_vac15 +
            relevel(PROV_5, ref='5 = BC') + outbreak, 
            data=CLSA_com50,
            family = binomial(link='logit'))
summary(lm06p)

tbl_regression(lm06p, exponentiate = T)
```

#### Build Simple OR for each variable
```{r}
# Build a function for simple regression and OR
simple_reg_OR<-function(v){
 lm_temp<-glm(SER_ADM_COV~v, data=CLSA_com50,
             family = binomial(link='logit'))
 print(summary(lm_temp))
 tbl_regression(lm_temp, exponentiate = T)
}

# test using age
simple_reg_OR(CLSA_com50$AGE_NMBR_COVID) # Looks good
```
```{r}
# Add other variables
simple_reg_OR(CLSA_com50$SEX_CLSA)

simple_reg_OR(CLSA_com50$URBAN_RURAL_COVID)

simple_reg_OR(relevel(CLSA_com50$SER_ETHN_WH_COV, ref='1=WH'))

simple_reg_OR(CLSA_com50$SER_EDU_COV)

simple_reg_OR(CLSA_com50$DEP_CESD10_COVX)

simple_reg_OR(CLSA_com50$dist_min_km)

simple_reg_OR(CLSA_com50$time_vac15)

simple_reg_OR(relevel(CLSA_com50$PROV_5, ref='5 = BC'))

simple_reg_OR(CLSA_com50$outbreak)
```

## Import the OR table
```{r}
library(readxl)
OR_import <- read_excel("~/dbs-vs-venous-antibodies/3_intermediate/OR_import.xlsx")
OR_import$Adj<-as.factor(OR_import$Adj)
levels(OR_import$Adj)=c("Unadjusted", "Adjusted")

OR_import$Adj[OR_import$Adj=="1"]<-'Adjusted'
OR_import$Adj[OR_import$Adj=="0"]<-'Unadjusted'

ggplot(OR_import, aes(x = OR, y = group)) + 
    geom_vline(aes(xintercept = 1), size = .75, linetype = "dashed",color='red')+
    geom_errorbarh(aes(xmax = higher, xmin = lower, color=Adj),
                       position = position_dodge(width = 1.0),
                       linewidth = .5, height = .5) +
    geom_point(size = 2.5, aes(colour=Adj),
               position = position_dodge(width = 1.0))
# Plot is good, but needs to add shadows
```












