---
title: "1.2 Propensity Score Weighting"
format: html
editor: visual
---

## Quarto

This file includes the codes for those sections: 1. PSW 2. Making tables and figures

## Running Code

## Load Packages

```{r}
library(dplyr)        # Pak for data management
library(WeightIt)     # Pak for PSW
library(lmtest)       # Pak for LRT
library(dgof)         # k.s test
library(spatstat)     # for weighted cdf function
library(zoo)          # for month/data format
```

## Load Dataset

```{r}
# CLSA comprehensive cohort: N=7678 
load(file='../1_data/private/CLSA_mncom.RData')

# CLSA comprehensive cohort: N=7230
load(file='../1_data/private/CLSA_com50.RData')
```

# ===================== Part I. Propensity Score Weighting ==================

## 1.1 Calculate weights using IPTW

#### Create a clean dataset for PSW models

```{r}
CLSA_com50.c6<-CLSA_com50 %>%
  dplyr::select(SER_ADM_COV, AGE_NMBR_COVID , age10,
            SEX_CLSA , start_datetime_COV,
            URBAN_RURAL_COVID , urban_rural,
            SER_ETHN_WH_COV  ,
            SER_EDU_COV ,
            DEP_CESD10_COVX ,
            dist_min , dist_min_25km,
            time_vac15, time_3cat,
            PROV_5, outbreak,
            SER_NUCLEOCAPSID_COV, SER_SPIKE_COV, SPIKE_ANTIBODY)
CLSA_com50.c6<-na.omit(CLSA_com50.c6)
```

#### PSW

```{r}
w.01 <- weightit(SER_ADM_COV~age10 + SEX_CLSA +
                             urban_rural +
                             SER_ETHN_WH_COV  +
                             SER_EDU_COV +
                             DEP_CESD10_COVX +
                             dist_min_25km +
                             time_vac15 +
                             PROV_5 + time_3cat, 
            data=CLSA_com50.c6, estimand = 'ATE', method = 'glm')
summary(w.01)

# add weights to data
CLSA_com50.c6$w.weights<-w.01$weights
```
#### Revert the coding on sampling methods: venous as ref (=0)
Rational: While OR have a symmetry where if you odds of positivity for DBS vs. VBS is the reciprocal of odds for VBS vs. DBS, but choice of reference group matters for risk ratio. Since VBS is more the “standard “ or “default”, I’d like to report odds of positivity for DBS vs. VBS, with VBS as the reference, which I believe is the opposite of what you’ve done, and if we’re to report RR and OR then the reference should be the same. I’ve already converted the OR in the results by just taking the reciprocal.
```{r}
CLSA_com50<-CLSA_com50 %>%
  mutate(SER_ADM_COV2=ifelse(SER_ADM_COV==0, 1, 0), .before=min_health) %>%
  select(-c(SER_ADM_COV)) %>%
  rename(SER_ADM_COV = SER_ADM_COV2)

CLSA_com50.c6<-CLSA_com50.c6 %>%
  mutate(SER_ADM_COV2=ifelse(SER_ADM_COV==0, 1, 0), .before=AGE_NMBR_COVID) %>%
  select(-c(SER_ADM_COV)) %>%
  rename(SER_ADM_COV = SER_ADM_COV2)
```


#### PSW model for propensity score
```{r}
lmm.w.01<-glm(SER_ADM_COV~age10 + SEX_CLSA +
                             urban_rural +
                             SER_ETHN_WH_COV  +
                             SER_EDU_COV +
                             DEP_CESD10_COVX +
                             dist_min_25km +
                             time_vac15 +
                             PROV_5 + time_3cat, 
            data=CLSA_com50.c6, family = binomial(link="logit"))
summary(lmm.w.01)
```


## 1.2. Analyze weighted data

#### Anti-N&S positivity: Odds ratios

```{r}

lmm.06.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
           data=CLSA_com50.c6, family = binomial(link = "logit"),
           weights = w.weights)
# ummary(psw.06.N)

lmm.06.N %>%
  gtsummary::tbl_regression(exponentiate = T)
# OR=3.56 (2.97-4.29)

# OR of anti-S positive
lmm.06.S<-glm(SER_SPIKE_COV~SER_ADM_COV,
              data=CLSA_com50.c6, family = binomial(link = "logit"),
              weights = w.weights)
lmm.06.S %>%
  gtsummary::tbl_regression(exponentiate = T)
# OR=1.43 (1.33-1.54)
```


#### Anti-N&S positivity: Risk ratios

Calculate risk ratios using a log-binomial model.


```{r}

#NOTE: risk ratios depend which group is coded as the reference
#. Outcome SER_NUCLEOCAPSID_COV should be 1 for positive and 0 for negative
#. Group SER_ADM_COV should be 1 for DBS and 0 for VBS

# RR of anti-N positive
lmm.RR.N <-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
           data=CLSA_com50.c6, family = binomial(link = "log"),
           weights = w.weights)

# View model summary
summary(lmm.RR.N)

# Exponentiate coefficient to get risk ratio
exp(coef(lmm.RR.N))

# Confidence intervals for the risk ratio
exp(confint(lmm.RR.N))

# PR of anti-S positive
lmm.RR.S<-glm(SER_SPIKE_COV~SER_ADM_COV,
              data=CLSA_com50.c6, family = binomial(link = "log"),
              weights = w.weights)

# View model summary
summary(lmm.RR.S)

# Exponentiate coefficient to get risk ratio
exp(coef(lmm.RR.S))

# Confidence intervals for the risk ratio
exp(confint(lmm.RR.S))
```


## ======== Part.II Making Plots and Tables =============

## 2.1 Figure 1: Weighted eCDF

#### Weighted ecdf, using IPTW weights

```{r}
# We used the ewcdf() from {spatstat} package
table(CLSA_com50.c6$SER_ADM_COV, CLSA_com50.c6$SER_SPIKE_COV)

# DBS with Spike+, N=1816
wecdf_S_DBS<-CLSA_com50.c6 %>%
  .[.$SER_SPIKE_COV==1 & .$SER_ADM_COV==0,] %>%
  .$SPIKE_ANTIBODY

# VBS with Spike+, N=1572
wecdf_S_VBS<-CLSA_com50.c6 %>%
  .[.$SER_SPIKE_COV==1 & .$SER_ADM_COV==1,] %>%
  .$SPIKE_ANTIBODY
```

##### Make and print the plot

```{r}
png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.1 Weighted eCDF Anti-S.png", 
    width=1600, height=1200, res=300)
plot(ewcdf(wecdf_S_DBS,
           weights=CLSA_com50.c6$w.weights[CLSA_com50.c6$SER_ADM_COV==0 &
                                          CLSA_com50.c6$SER_SPIKE_COV==1]),
     xlim = c(0.4,2500),
     log='x',
     xaxt = 'n',
     col = "blue",
     main= NULL,
     xlab = 'Quant Anti-S Assay Results')
plot(ewcdf(wecdf_S_VBS,
          weights=CLSA_com50.c6$w.weights[CLSA_com50.c6$SER_ADM_COV==1 &
                                          CLSA_com50.c6$SER_SPIKE_COV==1]),
     add = TRUE,
     lwd=2,
     col = "red")
axis(side=1, at=c(-0.4, 0, 1, 10, 100, 1000))
legend("bottomright", legend = c("DBS", "VBS"),
       lwd = 3, col = c("blue", "red"))
dev.off()
```

## 2.2 The regression model: Best-fit Model

```{r}
# Beware we apply the model here to the original CLSA data (N=7230) instead of the complete cases only version (.c6, N=6174). This would allow us to utilize more records in the model.
lm06.t <- glm(SER_ADM_COV ~ age10 + 
            urban_rural +
            relevel(SER_ETHN_WH_COV, ref='1=WH')  +
            SER_EDU_COV +
            DEP_CESD10_COVX +
            dist_min_25km +
            time_vac15 +
            relevel(PROV_5, ref='5 = BC') + time_3cat, 
            data=CLSA_com50,
            family = binomial(link='logit'))
summary(lm06.t)

gtsummary::tbl_regression(lm06.t, exponentiate = T)
```

## 2.3 Bivariate analysis

#### Build Simple OR for each variable

```{r}
# Build a function for simple regression and OR
simple_reg_OR<-function(v){
 lm_temp<-glm(SER_ADM_COV~v, data=CLSA_com50,
             family = binomial(link='logit'))
 print(summary(lm_temp))
 gtsummary::tbl_regression(lm_temp, exponentiate = T)
}

simple_reg_OR.w<-function(v){
 lm_temp<-glm(SER_ADM_COV~v, data=CLSA_com50.c6,
             family = binomial(link='logit'), weights = CLSA_com50.c6$w.weights)
 print(summary(lm_temp))
 gtsummary::tbl_regression(lm_temp, exponentiate = T)
}

# test using age (10-year scale)
simple_reg_OR(CLSA_com50$age10) # Looks good
simple_reg_OR.w(CLSA_com50.c6$age10) # Looks good
```

#### Add other variables, for unadjusted OR calculation

```{r}
simple_reg_OR(CLSA_com50$SEX_CLSA)                            # Sex

simple_reg_OR(CLSA_com50$urban_rural)                         # Rural/Urban, 3cate

simple_reg_OR(relevel(CLSA_com50$SER_ETHN_WH_COV, ref='1=WH'))# WH/Non-WH

simple_reg_OR(CLSA_com50$SER_EDU_COV)                         # Education

simple_reg_OR(CLSA_com50$DEP_CESD10_COVX)                     # Dep Scale

simple_reg_OR(CLSA_com50$dist_min_25km)                       # Travel Dist

simple_reg_OR(CLSA_com50$time_vac15)                          # Vax>15 Days?

simple_reg_OR(relevel(CLSA_com50$PROV_5, ref='5 = BC'))       # Prov, ref=BC

simple_reg_OR(CLSA_com50$time_3cat)                        # Time_3cat
```

#### Add bivariate analysis using weighted data

```{r}
simple_reg_OR.w(CLSA_com50.c6$SEX_CLSA)                            # Sex

simple_reg_OR.w(CLSA_com50.c6$urban_rural)                         # Rural/Urban, 3cate

simple_reg_OR.w(relevel(CLSA_com50.c6$SER_ETHN_WH_COV, ref='1=WH'))# WH/Non-WH

simple_reg_OR.w(CLSA_com50.c6$SER_EDU_COV)                         # Education

simple_reg_OR.w(CLSA_com50.c6$DEP_CESD10_COVX)                     # Dep Scale

simple_reg_OR.w(CLSA_com50.c6$dist_min_25km)                       # Travel Dist

simple_reg_OR.w(CLSA_com50.c6$time_vac15)                          # Vax>15 Days?

simple_reg_OR.w(relevel(CLSA_com50.c6$PROV_5, ref='5 = BC'))       # Prov, ref=BC

simple_reg_OR.w(CLSA_com50.c6$time_3cat)                           # Time_3cat

```

## 2.4 Make OR table

#### Import the OR table

```{r}
# This OR table is created outside of R manually, by filling the ORs from model.06p and those from simple logistic regression models above.
library(readxl)
OR_import <- read_excel("~/dbs-vs-venous-antibodies/3_intermediate/OR_import.xlsx",
                        sheet = "Reg")
OR_import$Adj<-as.factor(OR_import$Adj)

# Edit the data, add sig indicator
OR_import$alpha <- rep(1, length(OR_import$group))
OR_import$alpha[(OR_import$lower <1 & OR_import$higher <1) |
            (OR_import$lower >1 & OR_import$higher >1)]<-0
OR_import$alpha<-as.factor(OR_import$alpha)
levels(OR_import$alpha)=c("Significant","Insignificant")


g01<-ggplot(OR_import, aes(x = OR, y = group)) + 
    geom_vline(aes(xintercept = 1), size = .75, linetype = "dashed",color='red')+
    geom_errorbarh(aes(xmax = higher, xmin = lower, color=Adj, linetype=alpha),
                       position = position_dodge(width = 1.0),
                       linewidth = .5, height = .5) +
    geom_point(size = 2, aes(colour=Adj,  shape=alpha),
               position = position_dodge(width = 1.0))+
    scale_shape_manual(values=c(16, 1))+
    theme_bw()+
    theme(plot.background = element_blank(),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          legend.title = element_blank(),
          axis.title.y = element_blank()
          ) +
  labs(x = "Odds ratio (>1 indicates propensity for in-person venous sample)")

# Plot is good, but needs to add shadows for aesthetic purposes 
```

#### Applying GG forest

```{r}
# Load this package first
devtools::install_github("NightingaleHealth/ggforestplot")
library(ggforestplot) #From Github, not in pak tab but you can load it

# Add shadows and save the plot
png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.S3 OR Plot.png", 
    width=2400, height=1440, res=300)
g01+geom_stripes(odd = "#33333333", even = "#00000000")+
   scale_color_brewer(palette="Set1") 
dev.off()
```

## 2.5 OR table by Provinces

#### 2.5.1 ATL provinces - NFL & NS

##### Propensity Score Weighting

```{r}
# Propensity score weighting
w.ATL <- weightit(SER_ADM_COV~age10 + SEX_CLSA +
                             urban_rural +
                             SER_ETHN_WH_COV  +
                             SER_EDU_COV +
                             DEP_CESD10_COVX +
                             dist_min_25km +
                             time_vac15 + time_3cat, 
            data=CLSA_com50.ATL, estimand = 'ATE', method = 'glm')
summary(w.ATL)
```

##### Analysis based on weighted data

```{r}
# Add weights back to data
CLSA_com50.ATL$w.weights<-w.ATL$weights

# weighted analysis:

# OR of anti-N positive
lmm.ATL.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
    data=CLSA_com50.ATL, family = binomial(link = "logit"), weights = w.weights)
lmm.ATL.N %>%
  gtsummary::tbl_regression(exponentiate = T)

# OR of anti-S positive
lmm.ATL.S<-glm(SER_SPIKE_COV~SER_ADM_COV,
    data=CLSA_com50.ATL, family = binomial(link = "logit"), weights = w.weights)
lmm.ATL.S %>%
  gtsummary::tbl_regression(exponentiate = T)
```

#### 2.5.2 Quebec - For some reason people here prefer DBS more than VBS

##### PSW

```{r}
# DBS vs VBS
table(CLSA_com50.QC$SER_ADM_COV, useNA = 'ifany')
# 913 DBS, 448 VBS

# Propensity score weighting
w.QC <- weightit(SER_ADM_COV~age10 + SEX_CLSA +
                             urban_rural +
                             SER_ETHN_WH_COV  +
                             SER_EDU_COV +
                             DEP_CESD10_COVX +
                             dist_min_25km +
                             time_vac15 + time_3cat, 
            data=CLSA_com50.QC, estimand = 'ATE', method = 'glm')
summary(w.QC)
```

##### Analysis based on weighted data

```{r}
# Add weights back to data
CLSA_com50.QC$w.weights<-w.QC$weights
CLSA_com50.QC$bal.weights<-w.QC.bal$weights

# weighted analysis (IPTW):

# OR of anti-N positive
lmm.QC.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
    data=CLSA_com50.QC, family = binomial(link = "logit"), weights = w.weights)
lmm.QC.N %>%
  gtsummary::tbl_regression(exponentiate = T)

# OR of anti-S positive
lmm.QC.S<-glm(SER_SPIKE_COV~SER_ADM_COV,
    data=CLSA_com50.QC, family = binomial(link = "logit"), weights = w.weights)
lmm.QC.S %>%
  gtsummary::tbl_regression(exponentiate = T)
```

#### 2.5.3 Ontario - For some reason people here prefer VBS

##### PSW

```{r}
# DBS vs VBS
table(CLSA_com50.ON$SER_ADM_COV, useNA = 'ifany')
# 641 DBS, 943 VBS. More VBS than DBS, we could even consider PSM

# Propensity score weighting
w.ON <- weightit(SER_ADM_COV~age10 + SEX_CLSA +
                             urban_rural +
                             SER_ETHN_WH_COV  +
                             SER_EDU_COV +
                             DEP_CESD10_COVX +
                             dist_min_25km +
                             time_vac15 + time_3cat, 
            data=CLSA_com50.ON, estimand = 'ATE', method = 'glm')
summary(w.ON)
```

##### Analysis based on weighted data

```{r}
# Add weights back to data
CLSA_com50.ON$w.weights<-w.ON$weights

# weighted analysis (IPTW):

# OR of anti-N positive
lmm.ON.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
    data=CLSA_com50.ON, family = binomial(link = "logit"), weights = w.weights)
lmm.ON.N %>%
  gtsummary::tbl_regression(exponentiate = T)

# OR of anti-S positive
lmm.ON.S<-glm(SER_SPIKE_COV~SER_ADM_COV,
    data=CLSA_com50.ON, family = binomial(link = "logit"), weights = w.weights)
lmm.ON.S %>%
  gtsummary::tbl_regression(exponentiate = T)
```

#### 2.5.4 MT & AB

##### PSW

```{r}
# Propensity score weighting
w.MTAB <- weightit(SER_ADM_COV~age10 + SEX_CLSA +
                             urban_rural +
                             SER_ETHN_WH_COV  +
                             SER_EDU_COV +
                             DEP_CESD10_COVX +
                             dist_min_25km +
                             time_vac15 + time_3cat, 
            data=CLSA_com50.MTAB, estimand = 'ATE', method = 'glm')
summary(w.MTAB)
```

##### Analysis based on weighted data

```{r}
# Add weights back to data
CLSA_com50.MTAB$w.weights<-w.MTAB$weights

# weighted analysis (IPTW):

# OR of anti-N positive
lmm.MTAB.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
    data=CLSA_com50.MTAB, family = binomial(link = "logit"), weights = w.weights)
lmm.MTAB.N %>%
  gtsummary::tbl_regression(exponentiate = T)

# OR of anti-S positive
lmm.MTAB.S<-glm(SER_SPIKE_COV~SER_ADM_COV,
    data=CLSA_com50.MTAB, family = binomial(link = "logit"), weights = w.weights)
lmm.MTAB.S %>%
  gtsummary::tbl_regression(exponentiate = T)
```

## 2.5.5 BC

##### PSW

```{r}
# Propensity score weighting
w.BC <- weightit(SER_ADM_COV~age10 + SEX_CLSA +
                             urban_rural +
                             SER_ETHN_WH_COV  +
                             SER_EDU_COV +
                             DEP_CESD10_COVX +
                             dist_min_25km +
                             time_vac15 + time_3cat, 
            data=CLSA_com50.BC, estimand = 'ATE', method = 'glm')
summary(w.BC)
```

##### Analysis based on weighted data

```{r}
# Add weights back to data
CLSA_com50.BC$w.weights<-w.BC$weights

# weighted analysis (IPTW):

# OR of anti-N positive
lmm.BC.N<-glm(SER_NUCLEOCAPSID_COV~SER_ADM_COV,
    data=CLSA_com50.BC, family = binomial(link = "logit"), weights = w.weights)
lmm.BC.N %>%
  gtsummary::tbl_regression(exponentiate = T)

# OR of anti-S positive
lmm.BC.S<-glm(SER_SPIKE_COV~SER_ADM_COV,
    data=CLSA_com50.BC, family = binomial(link = "logit"), weights = w.weights)
lmm.BC.S %>%
  gtsummary::tbl_regression(exponentiate = T)
```

## 2.6 OR table by province

## First we need to build models, then pull ORs from the model

#### 2.6.1 ATL provinces (NFL & NS)

```{r}
# Apply same log reg model: model 06
lm06.ATL <- glm(SER_ADM_COV~age10 + 
            SEX_CLSA +
            urban_rural +
            relevel(SER_ETHN_WH_COV, ref = '1=WH')  +
            SER_EDU_COV +
            DEP_CESD10_COVX +
            dist_min_25km +
            time_vac15 + time_3cat, 
            data=CLSA_com50.ATL,
            family = binomial(link='logit'))

lm06.ATL %>%
  gtsummary::tbl_regression(exponentiate = T)

## Notes: the urban/rural variable needs some recategorization (done)
```

#### 2.6.2 QC

```{r}
# Apply same log reg model: model 06
lm06.QC <- glm(SER_ADM_COV~age10 + 
            SEX_CLSA +
            urban_rural +
            relevel(SER_ETHN_WH_COV, ref = '1=WH')  +
            SER_EDU_COV +
            DEP_CESD10_COVX +
            dist_min_25km +
            time_vac15 + time_3cat, 
            data=CLSA_com50.QC,
            family = binomial(link='logit'))

lm06.QC %>%
  gtsummary::tbl_regression(exponentiate = T)
```

#### 2.6.3 ON

```{r}
# Apply same log reg model: model 06
lm06.ON <- glm(SER_ADM_COV~age10 + 
            SEX_CLSA +
            urban_rural +
            relevel(SER_ETHN_WH_COV, ref = '1=WH')  +
            SER_EDU_COV +
            DEP_CESD10_COVX +
            dist_min_25km +
            time_vac15 + time_3cat, 
            data=CLSA_com50.ON,
            family = binomial(link='logit'))

lm06.ON %>%
  gtsummary::tbl_regression(exponentiate = T)
```

#### 2.6.4 MT & AB

```{r}
# Apply same log reg model: model 06
lm06.MTAB <- glm(SER_ADM_COV~age10 + 
            SEX_CLSA +
            urban_rural +
            relevel(SER_ETHN_WH_COV, ref = '1=WH')  +
            SER_EDU_COV +
            DEP_CESD10_COVX +
            dist_min_25km +
            time_vac15 + time_3cat, 
            data=CLSA_com50.MTAB,
            family = binomial(link='logit'))

lm06.MTAB %>%
  gtsummary::tbl_regression(exponentiate = T)
```

#### 2.6.5 BC

```{r}
# Apply same log reg model: model 06
lm06.BC <- glm(SER_ADM_COV~age10 + 
            SEX_CLSA +
            urban_rural +
            relevel(SER_ETHN_WH_COV, ref = '1=WH')  +
            SER_EDU_COV +
            DEP_CESD10_COVX +
            dist_min_25km +
            time_vac15 + time_3cat, 
            data=CLSA_com50.BC,
            family = binomial(link='logit'))

lm06.BC %>%
  gtsummary::tbl_regression(exponentiate = T)
```

## Next, we need to import the OR table and make OR plot

```{r}
library(readxl)
OR_import <- read_excel("../3_intermediate/OR_import.xlsx", sheet="Prov_5_inc")

# Prov_5_inc for table with prov-specific inc rate (per 1,000,000)
# Prov_5 for national inc rate (per 1,000,000)

# Add alpha indicator
OR_import$alpha <- rep(1, length(OR_import$group))
OR_import$alpha[(OR_import$lower <1 & OR_import$higher <1) |
            (OR_import$lower >1 & OR_import$higher >1)]<-0
OR_import$alpha<-as.factor(OR_import$alpha)
levels(OR_import$alpha)=c("Significant","Insignificant")

g5prov<-ggplot(OR_import, aes(x = OR, y = group)) + 
    geom_vline(aes(xintercept = 1), size = .75, linetype = "dashed",color='red')+
    geom_errorbarh(aes(xmax = higher, xmin = lower, color=Prov,linetype=alpha),
                       position = position_dodge(width = 1.0),
                       linewidth = .5, height = .5) +
    geom_point(size = 2, aes(colour=Prov, shape=alpha),
               position = position_dodge(width = 1.0))+
    scale_shape_manual(values=c(16, 1))+
    theme_bw()+
    theme(plot.background = element_blank(),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.border = element_blank(),
          legend.title = element_blank(),
          axis.title.y = element_blank(),
          plot.caption = element_text(hjust = 0)
          ) +
  labs(x = "Odds ratio (>1 indicates propensity for in-person venous sample)")

# Add stripes
library(ggforestplot) #From Github, not in pak tab but you can load it

png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.S4 OR Plot by prov.png", 
    width=2400, height=1800, res=300)
g5prov + geom_stripes(odd = "#33333333", even = "#00000000") + # Stripes
         scale_color_brewer(palette="Set1")                  # Set Colour
         #coord_cartesian(xlim =c(0, 6.75)) +     # Not removing the data, see the tail
         #ggtitle("OR of Venous Blood Sampling, Stratified by Province Groups")
dev.off()
```

Another plot for the Anti-N&S positivity:

```{r}
OR_NS <- read_excel("../3_intermediate/OR_NS.xlsx")

# Edit the data, add sig indicator
OR_NS$alpha <- rep(1, length(OR_NS$group))
OR_NS$alpha[(OR_NS$lower <1 & OR_NS$higher <1) |
            (OR_NS$lower >1 & OR_NS$higher >1)]<-0
OR_NS$alpha<-as.factor(OR_NS$alpha)
levels(OR_NS$alpha)=c("Significant","Insignificant")

g6ns<-ggplot(OR_NS, aes(x = OR, y = group)) + 
    geom_vline(aes(xintercept = 1), size = .75, linetype = "dashed",color='red')+
    geom_errorbarh(aes(xmax = higher, xmin = lower, color=Prov),
                       position = position_dodge(width = 1.0),
                       linewidth = .5, height = .5) +
    geom_point(size = 2, aes(colour=Prov),
               position = position_dodge(width = 1.0))+
    theme_bw()+
    theme(plot.background = element_blank(),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          #panel.border = element_blank(),
          legend.title = element_blank(),
          axis.title.y = element_blank(),
          plot.caption = element_text(hjust = 0)
          ) +
  labs(x = "Odds ratio (>1 indicates venous samples are more likely to be positive)")

# Add stripes
png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.S5 OR Plot of Anti-N & S by prov.png", 
    width=2400, height=1600, res=300)
g6ns +   scale_color_brewer(palette="Set1") +                  # Set Colour
         coord_cartesian(xlim =c(0, 8))      # Not removing the data, see the tail
         # ggtitle("OR of Assay Posivitity, Stratified by Province Groups")
dev.off()

rm(OR_NS, g6ns)
```

## 2.7 Heatmap for sampling frequency

#### 2.7.1 Create a heatmap

```{r}
# add samplemonth var
CLSA_com50$samplemonth<-as.yearmon(CLSA_com50$start_datetime_COV)

tb1<-CLSA_com50 %>%
  group_by(samplemonth, PROV_5, SER_ADM_COV, .add=TRUE) %>%
  summarise(n = n(), )
```

```{r}
# code DBS n as minus
tb1$n[tb1$SER_ADM_COV==0]= -1*tb1$n[tb1$SER_ADM_COV==0]

# Heatmap 02 - Heatmap, DBS (blue) over venous (red), by regions
hmap02<-ggplot(data = tb1[!is.na(tb1$samplemonth),],
               mapping = aes(x = samplemonth,
                             y = SER_ADM_COV, fill = n)) +
  geom_tile() +
  labs(title = "Heat map") +
  xlab(label = "Date of Sample Collection") +
  ylab(label = "") +
  theme_bw() + 
  scale_fill_gradient2(name = "Num. of Samples",
                      low = "blue", mid = "white", high = "red",
                      breaks=c(-400,-200,0,200,400),
                      labels=c("400-DBS","200",0,"200","400-Venous"),
                      limits=c(-400,400)) +
  theme(axis.text.y =element_blank(),
        axis.ticks.y=element_blank(),
        panel.background = element_rect(fill ="lightgrey"))

hmap02 +  facet_wrap(~PROV_5, nrow = 5)
```

#### 2.7.2 Create a sample freq bar plot

```{r}
tb3<-CLSA_com50 %>%
  group_by(samplemonth, SER_ADM_COV, .add=TRUE) %>%
  summarise(n = n(), )
tb3<-tb3[!is.na(tb3$samplemonth),]
# use ggplot for the plotting:

# First we modify data and make DBS negative (under x axis)
tb3$n.neg<-tb3$n*(-1)
tb3$n[tb3$SER_ADM_COV==0]<-tb3$n.neg[tb3$SER_ADM_COV==0]

p01<-ggplot(tb3, aes(samplemonth, n, fill = factor(SER_ADM_COV))) + 
  geom_bar(position = "stack", stat = 'identity')+
  labs(title = "Sampling Frequency",
       x="Date of Sample Collection", y="Num. of Samples",
       color = "") +
  scale_fill_manual("", labels = c("DBS", "Venous"), values=c("blue", "red")) +
  scale_y_continuous(breaks = seq(-1000, 500, by = 500), 
                     label = c("1000", "500","0","500"))+
  theme_bw() 

p01

# Print all plots panelled
png(file="../3_intermediate/Fig.S2 Heatmap and Freq.png", 
    width=2400, height=2400, res=300)
cowplot::plot_grid(p01, hmap02+  facet_wrap(~PROV_5, nrow = 5), 
                   rel_heights = c(1,2), align = "hv",
                   labels = c("A", "B"),
                   ncol = 1, nrow = 2)
dev.off()

# Remove all intermediate datasets
rm(tb1, tb3, p01, hmap02)
```

## 2.8 Modify figure.1 - Use linear model from Mulchandani 2021 to adjust for quant anti-s (Roche)

```{r}
# Source of the model:https://www.mdpi.com/1999-4915/13/6/962
# Formula: DBS = 0.623 + 0.0744*Plasma

# create a subset for future analysis
CLSAs<-select(CLSA_com50.c6, SER_ADM_COV,
              SPIKE_ANTIBODY, SER_SPIKE_COV, w.weights)

# anti-S positivity
table(CLSAs$SER_SPIKE_COV, useNA = 'ifany')
# "1" means anti-S positive

# Also we can adjust DBS values, this makes more senses
# Apply the model to adjust VBS values
CLSAs$s_dbs_adj<- CLSAs$SPIKE_ANTIBODY*13.4409 - 8.3737
CLSAs$s_dbs_adj[CLSAs$SER_ADM_COV==1]<-NA
```

```{r}
# Make plots
png(file="~/dbs-vs-venous-antibodies/3_intermediate/Fig.1 Weighted eCDF Anti-S.png", 
    width=1600, height=1200, res=300)
plot(ewcdf(CLSAs$SPIKE_ANTIBODY[CLSAs$SER_ADM_COV==0 & CLSAs$SER_SPIKE_COV==1],
           weights = CLSAs$w.weights[CLSAs$SER_ADM_COV==0 & CLSAs$SER_SPIKE_COV==1]),
     xlim = c(0.1,4000),
     log='x',
     xaxt = 'n',
     col = "blue",
     main=' ',
     xlab = 'Quant Anti-S Assay Results (U/ml, log scale)',
     ylab = 'Cumulative proportion')
abline(v=0.4, col="red", lty = "dotted", lwd = 2)
abline(v=2500, col="red", lty = "dotted", lwd = 2)
plot(ewcdf(CLSAs$s_dbs_adj[CLSAs$SER_ADM_COV==0 & CLSAs$SER_SPIKE_COV==1],
           weights = CLSAs$w.weights[CLSAs$SER_ADM_COV==0 & CLSAs$SER_SPIKE_COV==1]),
     add = TRUE,
     lwd=2,
     lty = "dotted",
     col = "purple")
plot(ewcdf(CLSAs$SPIKE_ANTIBODY[CLSAs$SER_ADM_COV==1 & CLSAs$SER_SPIKE_COV==1],
           weights = CLSAs$w.weights[CLSAs$SER_ADM_COV==1 & CLSAs$SER_SPIKE_COV==1]),
     add = TRUE,
     lwd=2,
     lty = "dotted",
     col = "red")
axis(side=1, at=c(-0.4, 0, 1, 10, 100, 1000))
legend("bottomright", legend = c("DBS", "DBS (adjusted)", "Venous"),
       lwd = 3, col = c("blue", "purple", "red"))
dev.off()
```

#### 2.9 Scatter Plot - 

## X. Save the edited data
```{r}
save(CLSA_com50, file = "../1_data/private/CLSA_com50.RData")
save(CLSA_com50.c6, file = "../1_data/private/CLSA_com50.c6.RData")
```

